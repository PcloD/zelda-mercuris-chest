-- Mode 7 shader.
-- Shows a texture in a perspective view and adds a curvature effect.
-- Inspired from https://www.shadertoy.com/view/ltsGWn

shader{

    vertex_source = [[

    #version 120

    void main() {

//      gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
      gl_Position = gl_ModelViewMatrix * gl_Vertex;
      gl_TexCoord[0] = gl_MultiTexCoord0;
    }
]],

    fragment_source = [[

    #version 120

    uniform sampler2D sol_texture;
    uniform vec2 sol_input_size;
    uniform vec2 sol_output_size;
    uniform vec2 sol_texture_size;
    uniform int sol_time;

    vec2 resolution = sol_output_size;

    // Tweak this parameter for more / less distortion
//    #define distortion 1.2
    #define distortion 1.1

    vec2 radialDistortion(vec2 coord) {
      coord *= sol_texture_size / sol_input_size;
      vec2 cc = coord - vec2(0.5);
      float dist = dot(cc, cc) * distortion;
      return (coord + cc * (1.0 + dist) * dist) * sol_input_size / sol_texture_size;
    }

    vec4 mainImage(vec2 fragCoord) {

      vec2 q = fragCoord / resolution;
      q = radialDistortion(q);  // TODO make the curvature depend on the height
      vec2 uv = q - vec2(0.5);

      // Create a 3D point
   //   float h = 0.25;
      float h = 0.90;
      vec3 p = vec3(uv.x, uv.y - h - 1.0, uv.y - h);

      // Projecting back to 2D space
      vec2 uvm7 = p.xy / p.z;

      // Texture scaling if you need
  //    float scale = 0.4;
      float scale = 0.05;
      uvm7 *= scale;

      // Rotations if needed
//      float a = (sol_time / 1000.0) * 0.25;
      float a = radians(180.0);
      mat2 rotation = mat2(cos(a), -sin(a), sin(a), cos(a));
      uvm7 *= rotation;

      // Initial position
      vec2 initial_position = vec2(0.50, 0.25);
      uvm7 += initial_position;

      // Translation
//      float dy = 0.0;
      float dy = -(sol_time / 1000.0) * 0.03;
      vec2 translation = vec2(0.0, dy);
      uvm7 += translation;

      // Repeat
    //  uvm7 = fract(uvm7);  // Unnecessary if GL_REPEAT is set on the texture.

      // Read background texture
      vec3 col = texture2D(sol_texture, uvm7).xyz;

      // Darkness based on the horizon
//      col *= -(uv.y - h - 0.50);

      // Output the color
      return vec4(col, 1.0);
  }

    void main() {
      gl_FragColor = mainImage(gl_FragCoord.xy);
//      gl_FragColor = mainImage(gl_TexCoord[0].xy);
    }
    ]]
}
